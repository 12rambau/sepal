- name: Setup AWS
  hosts: localhost
  connection: local
  gather_facts: false

  vars_files:
    - vars/vars.yml

  tasks:
    - name: Create Sepal security group
      ec2_group:
        name: Sepal
        description: The Sepal Security Group
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 168.202.0.0/16
          - proto: tcp
            from_port: 2222
            to_port: 2222
            cidr_ip: 168.202.0.0/16
          - proto: tcp
            from_port: 2375
            to_port: 2375
            cidr_ip: 168.202.0.0/16
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 389
            to_port: 389
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            from_port: 0
            to_port: 65535
            cidr_ip: 0.0.0.0/0

    - name: Create EFS security group
      ec2_group:
        name: EFS
        description: The EFS Security Group
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 2049
            to_port: 2049
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            from_port: 0
            to_port: 65535
            cidr_ip: 0.0.0.0/0

    - name: Provision Sepal instance
      ec2:
        key_name: "{{ region }}"
        group: Sepal
        instance_type: t2.medium
        image: "{{ ami_ids[region] }}"
        region: "{{ region }}"
        zone: "{{ availability_zone }}"
        wait: true
        exact_count: 1
        count_tag:
          Type: Sepal
          Environment: "{{ deploy_environment }}"
        instance_tags:
          Name: "Sepal - {{ deploy_environment}}"
          Type: Sepal
          Environment: "{{ deploy_environment }}"
        volumes:
          - device_name: /dev/sda1
            volume_size: 50
      register: ec2

    - name: Wait for SSH to be available in Sepal instance
      local_action: wait_for host="{{ item.public_ip }}"
                    port=22
                    state="started"
      with_items: ec2.instances


# TODO Allocate and associate elastic IP, once Ansible 2.0 is released
# https://github.com/ansible/ansible-modules-core/pull/1015 needed to make it idempotent
# TODO Route 53 resources